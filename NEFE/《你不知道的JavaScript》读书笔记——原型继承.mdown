## 《你不知道的JavaScript》读书笔记——原型继承

### 总结

如果要访问对象中并不存在的一个属性，`[[Get]]`操作就会查找对象内部`[[Prototype]]`关联的对象。这个关联关系实际上定义了一条“原型链”（有点像嵌套的作用域链），在查找属性时会对它进行遍历。

所有普通对象都有内置的`Object.prototype`，指向原型链的顶端（比如说全局作用域），如果在原型链中找不到指定的属性就会停止。`toString()`、`valueOf()`和其他一些通用的功能都存在于`Object.prototype`对象上，因此语言中所有的对象都可以使用它们。

关联两个对象最常用的方法是使用new关键词进行函数调用，在调用的4个步骤中会创建一个关联其他对象的新对象。

使用new调用函数时会把新对象的`.prototype`属性关联到“其他对象”。带`new`的函数调用通常被称为“构造函数调用”，尽管它们实际上和传统面向类语言中的类构造函数不一样。

虽然这些JavaScript机制和传统面向类语言中的“类初始化”和“类继承”很相似，但是JavaScript中的机制有一个核心区别，那就是不会进行复制，对象之间是通过内部的`[[Prototype]]`链关联的。出于各种原因，以“继承”结尾的术语（包括“原型继承”）和其他面向对象的术语都无法帮助用以理解JavaScript的真实机制（不仅仅是限制我们的思维模式）。

相比之下，“**委托**”是一个更合适的术语，因为对象之间的关系不是复制而是委托。

### 我的理解

对象模型

![JavaSctipt Object Layout](http://www.mollypages.org/tutorials/jsobj.jpg)

原型链

![原型连](http://www.liaoxuefeng.com/files/attachments/001439872160923ca15925ec79f4692a98404ddb2ed5503000)

JavaScript中的对象有一个特殊的`[[Prototype]]`内置属性，其实就是对于其他对象的引用。几乎所有的对象在创建时`[[Prototype]]`属性都会被赋予一个非空的值。


所有的函数默认都会拥有一个名为`prototype`的公有并且不可枚举（参见第3章）的属性，它会指向另一个对象：
```
function Foo() {
// ...
}
Foo.prototype; // { }
```
这个对象通常被称为Foo的原型，因为我们通过名为`Foo.prototype`的属性引用来访问它。

#### 属性的继承和屏蔽

给一个对象设置属性并不仅仅是添加一个新属性或者修改已有的属性值，过程：  
`myObject.foo = "bar";`  
	
	1. 如果myObject对象中包含名为foo的普通数据访问属性，这条赋值语句只会修改已有的属性值。如果foo不是直接存在于myObject中，[[Prototype]]链就会被遍历，类似[[Get]]操作。如果原型链上找不到foo，foo就会被直接添加到myObject上。
	2. 如果foo不是直接存在于myObject中，[[Prototype]]链就会被遍历，类似[[Get]]操作。如果原型链上找不到foo，foo就会被直接添加到myObject上。
	3. 如果foo存在于原型链上层，赋值语句myObject.foo = "bar"有3种可能的情况
		1. 如果在[[Prototype]]链上层存在名为foo的普通数据访问属性（参见第3章）并且没有被标记为只读（writable:false），那就会直接在myObject中添加一个名为foo的新属性，它是屏蔽属性。
		2. 如果在[[Prototype]]链上层存在foo，但是它被标记为只读（writable:false），那么无法修改已有属性或者在myObject上创建屏蔽属性。如果运行在严格模式下，代码会抛出一个错误。否则，这条赋值语句会被忽略。总之，不会发生屏蔽。
		3.  如果在[[Prototype]]链上层存在foo并且它是一个setter（参见第3章），那就一定会调用这个setter。foo不会被添加到（或者说屏蔽于）myObject，也不会重新定义foo这个setter。

#### 检查“类”关系

1. `instanceof`  
	`a instanceof Foo; `  
	`instanceof`操作符的左操作数是一个普通的对象，右操作数是一个函数。`instanceof`回答的问题是：在`a`的整条`[[Prototype]]`链中是否有指向`Foo.prototype`的对象？

	这个方法只能处理对象`a`和函数（带`.prototype`引用的`Foo`）之间的关系。如果要判断两个对象（比如`a`和`b`）之间是否通过`[[Prototype]]`链关联，只用`instanceof`无法实现。

2. `.isPrototypeOf`  
	`Foo.prototype.isPrototypeOf( a );`
	实际上并不关心（甚至不需要）`Foo`，只需要一个可以用来判断的对象（本例中是`Foo.prototype`）就行。`isPrototypeOf(..)`回答的问题是：在a的整条`[[Prototype]]`链中是否出现过`Foo.prototype`？
	
	只需要两个对象就可以判断它们之间的关系  
	`b.isPrototypeOf( c );`

3. 也可以直接获取一个对象的[[Prototype]]链。在ES5中，标准的方法是：`Object.getPrototypeOf( a );`  
	`Object.getPrototypeOf( a ) === Foo.prototype; // true`

4. 绝大多数浏览器也支持一种非标准的方法来访问内部`[[Prototype]]`属性：  
	`a.__proto__ === Foo.prototype; // true`

