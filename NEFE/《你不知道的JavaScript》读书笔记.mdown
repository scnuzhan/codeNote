## 《你不知道的JavaScript》读书笔记

### 第一章 作用域是什么

* 作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。

#### 1.1 编译原理
* 尽管通常将JavaScript归类为“动态”或“解释执行”语言，但事实上它是一门编译语言。但与传统的编译语言不同，它不是提前编译的，编译结果也不能在分布式系统中进行移植。
* 在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编译”。
	* 分词/词法分析（Tokenizing/Lexing）  
		这个过程会将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块被称为词法单元（token）。例如，考虑程序`var a = 2;`。这段程序通常会被分解成为下面这些词法单元：`var`、`a`、`=`、`2` 、`;`。空格是否会被当作词法单元，取决于空格在这门语言中是否具有意义。
	* 解析/语法分析（Parsing）  
		这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）。`var a = 2;`的抽象语法树中可能会有一个叫作VariableDeclaration的顶级节点，接下来是一个叫作Identifier（它的值是`a`）的子节点，以及一个叫作AssignmentExpression的子节点。AssignmentExpression节点有一个叫作NumericLiteral（它的值是`2`）的子节点。
	* 代码生成  
		将AST转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。抛开具体细节，简单来说就是有某种方法可以将`var a = 2;`的AST转化为一组机器指令，用来创建一个叫作a的变量（包括分配内存等），并将一个值储存在a中。

#### 1.2 理解作用域
* 引擎、编译器、作用域之间的协作
* LHS查询与RHS查询
	* 如果查找的目的是对变量进行赋值，那么就会使用LHS查询；如果目的是获取变量的值，就会使用RHS查询。
	* 赋值操作符会导致LHS查询。＝操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。
	* 函数声明不是LHS查询。
* JavaScript引擎首先会在代码执行前对其进行编译，在这个过程中，像`var a = 2`这样的声明会被分解成两个独立的步骤：
	1. 首先，`var a`在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。
	2. 接下来，`a = 2`会查询（LHS查询）变量`a`并对其进行赋值。

#### 1.3作用域嵌套
* LHS和RHS查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。

#### 1.4 异常
* 不成功的RHS引用会导致抛出`ReferenceError`异常。不成功的LHS引用会导致自动隐式地创建一个全局变量（非严格模式下），该变量使用LHS引用的目标作为标识符，或者抛出`ReferenceError`异常（严格模式下）。
* `ReferenceError`同作用域判别失败相关，而`TypeError`则代表作用域判别成功了，但是对结果的操作是非法或不合理的。

### 第二章 词法作用域

#### 2.1 词法阶段
* 词法作用域意味着作用域是由书写代码时函数声明的位置来决定的。编译的词法分析阶段基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它们进行查找。

#### 2.2 欺骗词法

##### `eval`
* JavaScript中的`eval(..)`函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。
* 在执行`eval(..)`之后的代码时，引擎并不“知道”或“在意”前面的代码是以动态形式插入进来，并对词法作用域的环境进行修改的。引擎只会如往常地进行词法作用域查找。
```
function foo(str, a) {
	eval( str ); // 欺骗！
	console.log( a, b );
}
var b = 2;
foo( "var b = 3;", 1 ); // 1, 3
```
* `eval(..)`调用中的`var b = 3;`这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量b，因此它对已经存在的`foo(..)`的词法作用域进行了修改。

##### `with`
* `with`通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。
```
var obj = {
	a: 1,
	b: 2,
	c: 3
};
// 单调乏味的重复"obj"
obj.a = 2;
obj.b = 3;
obj.c = 4;
// 简单的快捷方式
with (obj) {
	a = 3;
	b = 4;
	c = 5;
}
```
* `eval(..)`函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而`with`声明实际上是根据你传递给它的对象凭空创建了一个全新的词法作用域。
```
function foo(obj) {
	with (obj) {
		a = 2;
	}
}

var o1 = {
	a: 3
};

var o2 = {
	b: 3
};

foo( o1 );
console.log( o1.a ); // 2

foo( o2 );
console.log( o2.a ); // undefined
console.log( a ); // 2——a被泄漏到全局作用域上了！
```
* 尽管`with`块可以将一个对象处理为词法作用域，但是这个块内部正常的`var`声明并不会被限制在这个块的作用域中，而是被添加到`with`所处的函数作用域中。

##### 性能
* `eval(..)`或`with`机制的副作用是引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样
的优化是无效的。使用这其中任何一个机制都将导致代码运行变慢。不要使用它们。

### 第三章 函数作用域和块作用域

#### 3.1 函数中的作用域
* JavaScript具有基于函数的作用域
* 函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。

#### 3.2 隐藏内部实现，规避冲突
* 最小授权或最小暴露原则：在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的API设计。

##### 全局命名空间
变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。  

这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。

例如：
```
var MyReallyCoolLibrary = {
	awesome: "stuff",
	doSomething: function() {
		// ...
	},
	doAnotherThing: function() {
		// ...
	}
};
```
##### 模块管理
另外一种避免冲突的办法和现代的模块机制很接近，就是从众多模块管理器中挑选一个来使用。使用这些工具，任何库都无需将标识符加入到全局作用域中，而是通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。

显而易见，这些工具并没有能够违反词法作用域规则的“神奇”功能。它们只是利用作用域的规则强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突。

#### 3.3 函数作用域
函数表达式：`(function foo(){ .. })`

区分函数声明和表达式最简单的方法是看function关键字出现在声明中的位置（不仅仅是一行代码，而是整个声明中的位置）。如果function是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。

函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。函数声明`foo`被绑定在所在作用域中，可以直接通过`foo()`来调用它。函数表达式`foo`被绑定在函数表达式自身的函数中而不是所在作用域中。`foo`变量名被隐藏在自身中意味着不会非必要地污染外部作用域。

* 函数表达式可以是匿名的，而函数声明则不可以省略函数名——在JavaScript的语法中这是非法的。

#####  立即执行函数表达式IIFE
```
var a = 2;
(function foo() {
	var a = 3;
	console.log( a ); // 3
})();

console.log( a ); // 2
```

IIFE的另一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去。

```
var a = 2;
(function IIFE( global ) {
	var a = 3;
	console.log( a ); // 3
	console.log( global.a ); // 2
})( window );

console.log( a ); // 2
```

#### 3.4 块作用域

##### `with`
用with从对象中创建出的作用域仅在with声明中而非外部作用域中有
效。

##### `try/catch`
JavaScript的ES3规范中规定try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效。

##### `let`
* **let声明的变量拥有块级作用域。**也就是说用`let`声明的变量的作用域只是外层块，而不是整个外层函数。
	这意味着不再需要立即执行的函数表达式(IIFE)。在 ES5 中，像下图中的例子，我们需要构造一个立即执行的函数表达式去保证我们不污染全局作用域。在 ES6， 我们可以使用更简单的大括号`{}`，然后使用`const`或者`let`代替`var`来达到同样的效果。

	![不再需要立即执行的函数表达式(IIFE)](https://p5.ssl.qhimg.com/d/inn/9d158b47/3-big.jpg)

* **let声明的全局变量不是全局对象的属性。**这就意味着，不可以通过`window.变量名`的方式访问这些变量。它们只存在于一个不可见的块的作用域中，这个块理论上是Web页面中运行的所有JS代码的外层块。

* **形如`for (let x...)`的循环在每次迭代时都为`x`创建新的绑定。**

	这是一个非常微妙的区别，如果一个`for (let...)`循环执行多次并且循环保持了一个闭包，那么每个闭包将捕捉一个循环变量的不同值作为副本，而不是所有闭包都捕捉循环变量的同一个值。

	这种情况适用于现有的三种循环方式：`for-of`、`for-in`、以及传统的用分号分隔的类C循环。

* **`let`声明的变量直到控制流到达该变量被定义的代码行时才会被装载，所以在到达之前使用该变量会触发错误。**举个例子：
```
	function update() {
		console.log("当前时间:", t);  // 引用错误（ReferenceError）
		...
		let t = readTachymeter();
	}
```
	不可访问的这段时间变量一直处于作用域中，但是尚未装载，它们位于临时死区（Temporal Dead Zone，简称TDZ）中。

* **用let重定义变量会抛出一个语法错误（SyntaxError）。**

##### const
除了`let`以外，ES6还引入了`const`，同样可以用来创建块作用域变量，但其值是固定的（常量）。之后任何试图修改值的操作都会引起错误。
```
var foo = true;

if (foo) {
	var a = 2;
	const b = 3; // 包含在if中的块作用域常量

	a = 3; // 正常!
	b = 4; // 错误!
}

console.log( a ); // 3
console.log( b ); // ReferenceError!
```

### 第四章 提升

我们习惯将`var a = 2;`看作一个声明，而实际上JavaScript引擎并不这么认为。它将`var a`和`a = 2`当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。

这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端，这个过程被称为提升。

声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。

函数声明和变量声明都会被提升。但当出现在有多个“重复”声明的代码时，函数会首先被提升，然后才是变量

### 第五章 作用域和闭包

##### 闭包定义
* **函数可以访问它被创建时的上下文环境，称为闭包**——《JavaScript语言精粹》内部函数比它的外部函数具有更长的生命周期
* 闭包是函数和执行它的作用域组成的综合体——《JavaScript权威指南》  

##### 我的理解
* 闭包并不是JS特有的，它是一种计算机术语，在计算机科学中，将函数和作用域联系起来的这种机制就是闭包，所以**理论上所有的JS函数都可以被认为是闭包**。但是我们平时说的闭包，更多的是指的外部函数运行时产生的作用域对象被保留的现象。
* 闭包是基于词法作用域书写代码时所产生的自然结果。
* 当函数可以记住并访问所在的词法作用域时，就产生了闭包。
* 闭包就是在一个函数作用域里保存了一份它从上一级函数或者作用域取得的变量（键值对），这些键值对不随着上一级函数的执行完成而销毁，闭包是一个运行期概念
* **闭包是引用了自由变量的函数**

#### 循环和闭包
```
ar lists = document.getElementsByTagName("li");
for(var i=0,l=lists.length; i < l; i++){
  lists[i].onclick = (function(i){//保存于外部函函数
    return function(){
      alert(i);
    }
  })(i);
}
```
正常情况下，我们对这段代码行为的预期是分别输出数字1~5，每秒一次，每次一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次6。

缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个`i`的副本。但是根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个`i`。

解决方案一：
```
for (var i=1; i<=5; i++) {
	(function(j) {
		setTimeout( function timer() {
			console.log( j );
		}, j*1000 );
	})( i );
}
```

解决方案二（ES6）：
```
for (var i=1; i<=5; i++) {
	let j = i; // 是的，闭包的块作用域！
	setTimeout( function timer() {
		console.log( j );
	}, j*1000 );
}
```

##### 闭包经典问题：循环事件绑定
```
	(function(){
	var els = document.getElementsByTagName('li');
	for(var i = 0, len = els.length; i < len; i++){
	    var el = els[i];
	    el.onclick = function(){
	        alert(el.innerHTML);	//全部输出最后一个列表项
	    };
	}
	})();
```

解决方案，闭包：
```
(function(){
var els = document.getElementsByTagName('li');
for(var i = 0, len = els.length; i < len; i++){
    (function(el){
    	el.onclick = function(){
    	    alert(el.innerHTML);
    	};
    })(els[i])
}
})();
```

在定时器、事件监听器、Ajax请求、跨窗口通信、Web Workers或者任何其他的异步（或者同步）任务中，只要使用了回调函数，实际上就是在使用闭包！

#### 模块

##### 简单模块示例
```
function CoolModule() {
	var something = "cool";
	var another = [1, 2, 3];
	function doSomething() {
		console.log( something );
	}
	function doAnother() {
		console.log( another.join( " ! " ) );
	}
	return {
		doSomething: doSomething,
		doAnother: doAnother
	};
}

var foo = CoolModule();

foo.doSomething(); // cool
foo.doAnother(); // 1 ! 2 ! 3
```
`CoolModule()`返回一个用对象字面量语法`{ key: value, ... }`来表示的对象。这个返回的对象中含有对内部函数而不是内部数据变量的引用。我们保持内部数据变量是隐藏且私有的状态。可以将这个对象类型的返回值看作本质上是模块的公共API。

模块模式需要具备两个必要条件。  

	1. 必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。  
	2. 封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。

##### 现代的模块机制
大多数模块依赖加载器/管理器本质上都是将这种模块定义封装进一个友好的API。
```
var MyModules = (function Manager() {
	var modules = {};
	function define(name, deps, impl) {	//模块名称、依赖的模块、模块的定义
		for (var i=0; i<deps.length; i++) {
			deps[i] = modules[deps[i]];
		}
		modules[name] = impl.apply( impl, deps );	//模块管理器核心
	}
	function get(name) {
		return modules[name];
	}
	return {
		define: define,
		get: get
	};
})();
```

在这段代码中，定义了`myModules`这个管理器，具有定义`define`和获取`get`两个方法。其中最重要的一句是：`modules[name] = impl.apply(impl,deps)`，这里为模块定义引入了其依赖，并将其返回值(也就是模块的API)，储存在`modules`这个模块列表中。

下面展示了如何使用它来定义模块：
```
MyModules.define( "bar", [], function() {
	function hello(who) {
		return "Let me introduce: " + who;
	}
	return {
		hello: hello
	};
} );

MyModules.define( "foo", ["bar"], function(bar) {
	var hungry = "hippo";

	function awesome() {
		console.log( bar.hello( hungry ).toUpperCase() );
	}
	return {
		awesome: awesome
	};
} );

var bar = MyModules.get( "bar" );
var foo = MyModules.get( "foo" );

console.log(
	bar.hello( "hippo" )
); // Let me introduce: hippo

foo.awesome(); // LET ME INTRODUCE: HIPPO
```

`foo`和`bar`模块都是通过一个返回公共API的函数来定义的。`foo`甚至接受`bar`的示例作为依赖参数，并能相应地使用它。

它们符合前面列出的模块模式的两个特点：为函数定义引入包装函数，并保证它的返回值和模块的API保持一致。

##### 未来的模块机制
ES6中为模块增加了一级语法支持。但通过模块系统进行加载时，ES6会将文件当作独立的模块来处理。每个模块都可以导入其他模块或特定的API成员，同样也可以导出自己的API成员。

```
//bar.js
function hello(who) {
	return 'Let me introduce: ' + who;
}
export hello;


//foo.js 
// 仅从"bar"模块导入hello() 
import hello from 'bar';

var hungry = 'hippo';

function awesome() {
	console.log(hello(hungry).toUpperCase());
}
export awesome;


//baz.js 
// 导入完整的"foo"和"bar"模块 
module foo from 'foo';
module bar from 'bar';

console.log(
	bar.hello('rhino')
); // Let me introduce: rhino 

foo.awesome(); // LET ME INTRODUCE: HIPPO
```

`import`可以将一个模块中的一个或多个API导入到当前作用域中，并分别绑定在一个变量上（在我
们的例子里是`hello`）。`module`会将整个模块的API导入并绑定到一个变量上（在我们的例子里是`foo`
和`bar`）。`export`会将当前模块的一个标识符（变量、函数）导出为公共API。