## js基础

#### 基本类型
* Number：整数、浮点数、特殊值NaN/Infinity（无限大）
* String：单引号或双引号引起来的内容
* Boolean：true、false
* Object：一组无序的键值对
* Null：null，空对象
* Undefined：undefined（已声明但未赋值的变量、获取对象不存在的属性）

#### 类型识别：typeof

#### 原始类型和引用类型
* 原始类型：Number、String、Boolean、Undefined、Null
* 引用类型：Object

#### 操作符与表达式
* 一元操作符：++  --
* 算数操作符：+  -  *  /  %
* 关系操作符：>  <  >=  <=
* 相关操作符：==  !=  ===  !==
* 逻辑操作符：!  &&  ||
* 赋值操作符：=
* 条件操作符：? : 
* 逗号操作符：,
* 对象操作符：`new`  `delete`  `.`  `[]`  `instanceof`(变量是否是对象的实例)  `in`(属性是否在对象中)
* 位操作符：~  &  |  ^  <<  >>  >>>

#### 语句
* `for(属性名 in 对象){ 语句 }`：遍历对象的属性
* `with(表达式){ 语句 }`：给语句指定对象
* 异常捕获语句
```
try{
	语句
} catch(exception){      //(error)
	语句                 //console.log(error)
} finally{
	语句
}
```

#### 数值
* 绝对值：`Math.abs(x)`
* 四舍五入：`Math.round(x)`
* 向上取整：`Math.ceil(x)`
* 向下取整：`Math.floor(x)`
* 取最大值：`Math.max([value1[,value2[, ...]]])`
* 取最小值：`Math.mini([value1[,value2[, ...]]])`
* 取[0, 1)随机数：`Math.random()`
* Math.cos(x), Math.exp(x), Math.log(x), Math.sqrt(x), Math.pow(x, y)
* 字符串转整型数值：
```
parseInt('1.1')    // 1
parseInt('1.9')    // 1
parseInt('1b2.4')    // 1
parseInt('www')    // NaN
```
* 字符串转浮点型数值：parseFloat(string)    `parseFloat(12.4b5)    // 12.4`
* 字符串转化数值：Num(value)    `Number(14.4b5)    // 出现非数字输出NaN`
* 字符串转数值并设置保留小数点数位，num.toFixed(digits)    `(100.123).toFixed(2)    // "100.12"，结果为字符串

#### 字符串
* `str.length`：字符串长度
* `str.charAt(index)`：获取某一索引的字符值
* `str.indexOf(searchValue[,fromIndex])`：寻找某一个字符串的索引值（只返回第一个），不存在返回-1
* `str.search(regexp)`：按照规则寻找字符串，返回索引值
* `str.match(regexp)`：寻找规则的字符，返回数组，不存在返回null
* `str.replace(regexp|substr, newSubstr|function)`：替换字符串
* `str.substring(indexA[,indexB])`：从某一索引值开始截取字符串，[indexA, indexB)
* `str.slice(beginSlice[,endSlice])`：从某一索引值开始截取字符串，参数可以为负值，-1表示倒数第一个
* `str.substr(start[,length])`：从某一索引值开始截取字符串，第二个可选参数为长度
* `str.split([sepatator][,limit])`：匹配规则截断字符串，返回数组，第二个可选参数为输出个数限制
* `str.toLowercase()`：转换成小写
* `str.toUppercase()`：转换成大写
* `+`：字符串连接
* `String()`：转换成字符串
* `\`：转义

#### 对象
* 创建对象
	* `var car = new Object()`
	* `var car = {}`
* 添加、删除属性与方法
	* `car.type = 'SUV'`
	* `car.stop = function(){...}`
	* `delete car.color`
* `obj.constructor`：对象构造函数
* `obj.toString()`：把对象转成字符串
* `obj.valueOf()`：获取对象原始值
* `obj.hasOwnproperty()`：检查对象是否自有某属性，返回布尔值

#### 数组
* 创建数组
	* `var array = new Array()`
	* `var array = []`
* `arr.length`：数组长度
* `arr[index]`：按索引值获取元素
* `arr.indexOf(searchElement[,fromIndex])`：查找元素的索引值
* `arr.forEach(callback[,thisArg])`：调用回调函数遍历数组，第二个可选参数为指定this指向，回调函数callback`function callback(item, index, array){}`
* `arr.reserve()`：倒序数组
* `arr.sort([compareFunction])`：排序数组
* `arr.push(element1, ... elementN)`：向数组队尾添加元素
* `arr.unshift(element)`：向队首添加元素
* `arr.shift()`：获取队首第一个元素并将其从数组中删除
* `arr.pop()`：获取队尾元素并将其从数组中删除
* `arr.splice(index, howMany[,ele1[, ...[eleN]]])`：第一个index表示从第几个元素开始删，第二个参数howMany表示删多少个，第三个参数为插回去的元素，howMany为0时，往前插入（在index前插入新元素）
* `arr.slice(begin[,end])`：拷贝数组，[begin, end)，第二个参数缺省时表示从begin拷贝到末尾
* `arr.concat(value1, ... valueN)`：连接数组
* `arr.join([separator])`：将数组连接成字符串
* `arr.map(callback[,thisArg])`：调用回调函数遍历数组并生成新数组
* `arr.reduce(callback[,initialValue])`：回调函数callback`function callback(previousResult, item, index, array){}`
```
var students = [
	{id:1,score:80},
	{id:2,score:50},
	{id:3,score:70}
];
var sum = function(previousResult,item,index,array){
	return previousResult+item.score;
};
students.reduce(sum,0);  // 200
```

#### 函数
* 参数列表数组 `arguments`
* 参数为原始类型：值传递，参数为对象类型：引用传递
* 作用域：变量起作用的范围

#### 日期Date()
* 创建日期
	* 当前时间：`var date = new Date()`
	* 传参设置时间：`new date(year[,month[,day[minutes[,seconds[,milliseconds]]]]])`
* 获取时间：date.getXXX()
	* `date.getFullYear()`
	* `date.getMonth()`
	* `date.getDate()`
	* `date.getHours()`
* 格式化时间
```
function format(date){
	return date.getFullYear()+'-'+padding(date.getMonth()+1)+'-'+padding(date.getDate())+' '+padding(date.getHours())+':'+padding(date.getMinutes())+':'+padding(date.getSeconds())
}

function padding(time){
	return time>9?time:('0'+time)
}
```
* 设置时间：date.setXXX()
	* date.setFullYear()
	* date.setMonth()
	* date.setDate()
	* date.setHours()
	* date.setMinutes()
	* date.setSeconds()
* 某个月的第0天相当于上一个月的最后一天，以此获取每个月的天数
```
function getDays(year, month){
	var date = new Date(year, month, 0)
	return date.getDate()
}
```
* Date转化成Number：`date.getTime()`  距1970年1月1日00:00:00的毫秒数
* Number转换成Date：`date.setTime(time)`或者`new Date(time)`

#### 正则表达式regular expression
* 正则表达式：描述字符串规则的表达式
* 创建方法
	* `/pattern/attrs`
	* `new RegExp(pattern, attrs)`
* `regexpObj.test(str)`：测试正则表达式与指定字符串是否匹配
* 锚点：匹配一个位置
	* `^`：行起始位置
	* `$`：行结束位置
	* `\b`：单词边界
* 字符
	* `.`：任一字符（换行符除外）
	* `\d`或`[0-9]`：一个数字
	* `\D`等价于`[^\d]`与`[^0-9]`：一个非数字字符
	* `\s`：空白符
	* `\w`等价于`[A-Za-z0-9]`：一个字母或者数字字符
	* `\`：转义字符
* 量词：字符出现的次数
	* `{m}`：m次
	* `{m, n}`：m到n次
	* `*`：任意次
	* `?`：0次或1次
	* `+`：1次或1次以上
* 属性
	* `g`：global，全局属性
	* `i`：不区分大小
* 多选分支，`/\.(png|jpg|jpge|gif)/
* 捕获：保存匹配到的字符串，`()`捕获，`(?:)`不捕获，捕获的结果存在`$1`, `$2`...

#### JSON  JavaScript Object Notaion
* JSON转JS：`JSON.parse(text[,reviver])`
* JS转JSON：`JSON.stringfy(value[,replacer[,space]])`


