## 你不知道的JavaScript》读书笔记——对象

### 第3章 对象

#### 3.1 语法

JavaScript中的对象有字面形式（比如`var a = { .. }`）和构造形式（比如`var a = new Array(..)`）。字面形式更常用，不过有时候构造形式可以提供更多选项。

#### 3.2 类型

##### 语言类型
在JavaScript中一共有六种主要类型（术语是“语言类型”）：

	string
	number
	boolean
	null
	undefined
	object

简单基本类型（`string`、`boolean`、`number`、`null`和`undefined`）本身并不是对象。`null`有时会被当作一种对象类型，但是这其实只是语言本身的一个bug，即对`null`执行`typeof null`时会返回字符串`object`。

“JavaScript中万物皆是对象”，这是一种不太恰当的说法，JavaScript中有许多特殊的对象子类型，我们可以称之为复杂基本类型。函数就是对象的一个子类型（从技术角度来说就是“可调用的对象”）。数组也是对象的一种类型，具备一些额外的行为。数组中内容的组织方式比一般的对象要稍微复杂一些。

##### 内置对象

JavaScript中有一些对象子类型，通常被称为内置对象。

	String
	Number
	Boolean
	Object
	Function
	Array
	Date
	RegExp
	Error

这些内置对象从表现形式来说很像其他语言中的类型（type）或者类（class），比如Java中的String类。但是在JavaScript中，它们实际上只是一些内置函数。

JavaScript引擎会自动把对象字面量转换成相应的对象类型，然后调用对象方法

```
var strPrimitive = "I am a string";
console.log( strPrimitive.length ); // 13
console.log( strPrimitive.charAt( 3 ) ); // "m"
```

`null`和`undefined`没有对应的构造形式，它们只有文字形式。相反，`Date`只有构造，没有文字形式。

对于`Object`、`Array`、`Function`和`RegExp`（正则表达式）来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量。

#### 3.3 内容

对象的内容是由一些存储在特定命名位置的（任意类型的）值组成的，我们称之为属性。

```
var myObject = {
	a: 2
};
myObject.a; // 2
myObject["a"]; // 2
```

如果要访问myObject中a位置上的值，我们需要使用.操作符或者[]操作符。`.a`语法通常被称为“属
性访问”，`["a"]`语法通常被称为“键访问”。实质上二者是等同的。

这两种语法的主要区别在于.操作符要求属性名满足标识符的命名规范，而`[".."]`语法可以接受任意UTF-8/Unicode字符串作为属性名。举例来说，如果要引用名称为"Super-Fun!"的属性，那就必须使用["Super-Fun!"]语法访问，因为Super-Fun!并不是一个有效的标识符属性名。

在对象中，属性名永远都是字符串。如果你使用`string`（字面量）以外的其他值作为属性名，那它首先会被转换为一个字符串。

##### 可计算属性名

如果需要通过表达式来计算属性名，那么可以利用`myObject[..]`这种属性访问语法

```
var prefix = "foo";
var myObject = {
	[prefix + "bar"]: "hello",
	[prefix + "baz"]: "world"
};
myObject["foobar"]; // hello
myObject["foobaz"]; // world
```

##### 属性与方法

如果访问的对象属性是一个函数，可以称之为“方法访问”，但并不是很准确。

##### 数组

数组也支持`[]`访问形式，数组期望的是数值下标。

```
var myArray = [ "foo", 42, "bar" ];
myArray.baz = "baz";
myArray.length; // 3
myArray.baz; // "baz"

myArray["3"] = "baz";
myArray.length; // 4
myArray[3]; // "baz"
```

虽然添加了命名属性（无论是通过`.`语法还是`[]`语法），但数组的`length`值并未发生变化。如果试图向数组添加一个属性，但是属性名“看起来”像一个数字，那它会变成一个数值下标（因此会修改数组的内容而不是添加一个属性）

##### 复制对象

深复制hack：`var newObj = JSON.parse( JSON.stringify( someObj ) );`

##### 属性描述符

```
var myObject = {
	a:2
};
Object.getOwnPropertyDescriptor( myObject,
"a" );
//{
//	value: 2,
//	writable: true,
//	enumerable: true,
//	configurable: true
//}
```

普通的对象属性对应的属性描述符（也被称为“数据描述符”，因为它只保存一个数据值）不仅仅只是一个2。它还包含另外三个特性：writable（可写）、enumerable（可枚举）和configurable（可配置）。

###### writable

`writable`决定是否可以修改属性的值。

```
var myObject = {};
Object.defineProperty( myObject, "a", {
	value: 2,
	writable: false, // not writable!
	configurable: true,
	enumerable: true
} );
myObject.a = 3;
myObject.a; // 2
```

在严格模式下，修改属性值会报错TypeError

###### Configurable

只要属性是可配置的，就可以使用`defineProperty(..)`方法来修改属性描述符

```
var myObject = {
	a:2
};
myObject.a = 3;
myObject.a; // 3
Object.defineProperty( myObject, "a", {
	value: 4,
	writable: true,
	configurable: false, // 不可配置！
	enumerable: true
} );
myObject.a; // 4
myObject.a = 5;
myObject.a; // 5

Object.defineProperty( myObject, "a", {
	value: 6,
	writable: true,
	configurable: true,
	enumerable: true
} ); // TypeError
```

最后一个`defineProperty(..)`会产生一个`TypeError`误，不管是不是处于严格模式，尝试修改一个不可配置的属性描述符都会出错。注意：如你所见，把`configurable`修改成`false`是单向操作，无法撤销！，不过依然可以可以把`writable`的状态由`true`改为`false`，但是无法由`false`改为`true`。

###### Enumerable

`Enumerable`描述符控制的是属性是否会出现在对象的属性枚举中，比如说`for..in`循环。如果把`enumerable`设置成`false`，这个属性就不会出现在枚举`for..in`中，虽然仍然可以正常访问它。

##### 对象属性不变性

所有的不变性方法创建的都是浅不变性，也就是说，它们只会影响目标对象和它的直接属性。如果目标对象引用了其他对象（数组、对象、函数，等），其他对象的内容不受影响，仍然是可变的：

###### 对象常量

结合`writable:false`和`configurable:false`就可以创建一个真正的常量属性（不可修改、重定义或者删除）

###### 禁止扩展

如果你想禁止一个对象添加新属性并且保留已有属性，可以使用`Object.preventExtensions(..)`：
```
var myObject = {
	a:2
};
Object.preventExtensions( myObject );
myObject.b = 3;
myObject.b; // undefined
```
在非严格模式下，创建属性b会静默失败。在严格模式下，将会抛出TypeError错误。

###### 密封

`Object.seal(..)`会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用`Object.preventExtensions(..)`并把所有现有属性标记为`configurable:false`。所以，密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性（虽然可以修改属性的值）。

###### 冻结

`Object.freeze(..)`会创建一个冻结对象，这个方法实际上会在一个现有对象上调用`Object.seal(..)`并把所有“数据访问”属性标记为`writable:false`，这样就无法修改它们的值。

##### `[[Get]]`

在语言规范中，`myObject.a`在`myObject`上实际上是实现了`[[Get]]`操作（有点像函数调用：`[[Get]]()`）。对象默认的内置`[[Get]]`操作首先在对象中查找是否有名称相同的属性，如果找到就会返回这个属性的值。

##### `[[Put]]`

`[[Put]]`被触发时，实际的行为取决于许多因素，包括对象中是否已经存在这个属性（这是最重要的因素）。如果已经存在这个属性，`[[Put]]`算法大致会检查下面这些内容。

	1. 属性是否是访问描述符？如果是并且存在`setter`就调用`setter`。
	2. 属性的数据描述符中`writable`是否是`false`？如果是，在非严格模式下静默失败，在严格模式下
	抛出`TypeError`异常。
	3. 如果都不是，将该值设置为属性的值。

##### 访问描述符Getter和Setter

对于访问描述符来说，JavaScript会忽略它们的`value`和`writable`特性，取而代之的是关心`set`和`get`（还有`configurable`和`enumerable`）特性。
```
var myObject = {
	//给a定义一个getter
	get a() {
		return 2;
	}
};
Object.defineProperty(
	myObject, // 目标对象
	"b", // 属性名
	{ // 描述符
		// 给b设置一个getter
		get: function(){ return this.a * 2 },
		// 确保b会出现在对象的属性列表中
		enumerable: true
	}
);
myObject.a; // 2
myObject.b; // 4
```
不管是对象文字语法中的`get a() { .. }`，还是`defineProperty(..)`中的显式定义，二者都会在对象中创建一个不包含值的属性，对于这个属性的访问会自动调用一个隐藏函数，它的返回值会被当作属性访问的返回值

在ES5中可以使用`getter`和`setter`部分改写默认操作，但是只能应用在单个属性上，无法应用在整个对象上。`getter`是一个隐藏函数，会在获取属性值时调用。`setter`也是一个隐藏函数，会在设置属性值时调用。

```
var myObject = {
	// 给 a 定义一个getter
	get a() {
		return this._a_;
	},
	// 给 a 定义一个setter
	set a(val) {
		this._a_ = val * 2;
	}
};
myObject.a = 2;
myObject.a; // 4
```

##### 存在性

在不访问属性值的情况下判断对象中是否存在这个属性：
```
var myObject = {
	a:2
};

("a" in myObject); // true
("b" in myObject); // false

myObject.hasOwnProperty( "a" ); // true
myObject.hasOwnProperty( "b" ); // false
```
`in`操作符会检查属性是否在对象及其`[[Prototype]]`原型链中，`hasOwnProperty(..)`只会检查属性是否在`myObject`对象中，不会检查`[[Prototype]]`链。


#### 3.4 遍历

数组遍历用for循环，这实际上并不是在遍历值，而是遍历下标来指向值，如`myArray[i]`。
```
var myArray = [1, 2, 3];
for (var i = 0; i < myArray.length; i++) {
	console.log( myArray[i] );
}
// 1 2 3
```

ES6增加了一种用来遍历数组的`for..of`循环语法（如果对象本身定义了迭代器的话也可以遍历对象）：
```
var myArray = [ 1, 2, 3 ];
for (var v of myArray) {
	console.log( v );
}
// 1
// 2
// 3
```
`for..of`循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的`next()`方法来遍历所有返回值。数组有内置的`@@iterator`，因此`for..of`可以直接应用在数组上。普通的对象没有内置的`@@iterator`，所以无法自动完成`for..of`遍历。如果要遍历对象则需要手动给对象定义`@@iterator`。