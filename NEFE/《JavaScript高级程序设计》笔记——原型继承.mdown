## 《JavaScript高级程序设计》笔记——原型继承

### 基于`prototype`的模拟类继承实现方式

#### 借用构造函数

借用构造函数（有时候也叫做伪造对象或经典继承）：在子类型构造函数的内部调用超类型构造函数。函数是在特定环境中执行代码的对象，因此通过使用`apply()`和`call()`方法也可以在（将来）新创建的对象上执行构造函数.

```
function SuperType(){
	this.colors = ["red", "blue", "green"];
}
function SubType(){
	SuperType.call(this);	//核心代码：继承了 SuperType
}
var instance1 = new SubType();
instance1.colors.push("black");
alert(instance1.colors); //"red,blue,green,black"
var instance2 = new SubType();
alert(instance2.colors); //"red,blue,green" 
```

如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定义，因此**函数复用**就无从谈起了。而且，在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。


#### 组合继承

组合继承（combination inheritance），有时候也叫做伪经典继承，指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。

```
function SuperType(name){
	this.name = name;
	this.colors = ["red", "blue", "green"];
}
SuperType.prototype.sayName = function(){
	alert(this.name); 
};
function SubType(name, age){
	SuperType.call(this, name);		//继承属性
	this.age = age;
}

SubType.prototype = new SuperType();	//继承方法
SubType.prototype.constructor = SubType;
SubType.prototype.sayAge = function(){
	alert(this.age);
};

var instance1 = new SubType("Nicholas", 29);
instance1.colors.push("black");
alert(instance1.colors); //"red,blue,green,black"
instance1.sayName(); //"Nicholas";
instance1.sayAge(); //29

var instance2 = new SubType("Greg", 27);
alert(instance2.colors); //"red,blue,green"
instance2.sayName(); //"Greg";
instance2.sayAge(); //27
```

组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点


#### 原型式继承

道格拉斯·克罗克福德在 2006 年写了一篇文章，题为 Prototypal Inheritance in JavaScript （JavaScript中的原型式继承）。在这篇文章中，他介绍了一种实现继承的方法，这种方法并没有使用严格意义上的构造函数。他的想法是借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。为了达到这个目的，他给出了如下函数。
```
function object(o){
	function F(){}
	F.prototype = o;
	return new F();
} 
```
从本质上讲，object()对传入其中的对象执行了一次浅复制。

ECMAScript 5 通过新增`Object.create()`方法规范化了原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。在传入一个参数的情况下，`Object.create()`与`object()`方法的行为相同。

```
var person = {
	name: "Nicholas",
	friends: ["Shelby", "Court", "Van"]
};
var anotherPerson = Object.create(person);	//以现有一对象为基础
anotherPerson.name = "Greg";
anotherPerson.friends.push("Rob");

var yetAnotherPerson = Object.create(person);	//以现有一对象为基础
yetAnotherPerson.name = "Linda";
yetAnotherPerson.friends.push("Barbie");
alert(person.friends); //"Shelby,Court,Van,Rob,Barbie" 
```

`Object.create()`方法的第二个参数与`Object.defineProperties()`方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的。以这种方式指定的任何属性都会覆盖原型对象上的同名属性。
```
var person = {
	name: "Nicholas",
	friends: ["Shelby", "Court", "Van"]
}; 
var anotherPerson = Object.create(person, {
	name: {
	value: "Greg"
	}
});

alert(anotherPerson.name); //"Greg"
```

只想让一个对象与另一个对象保持类似的情况下，原型式继承是完全可以胜任的。另外需注意：包含引用类型值的属性始终都会共享相应的值，上述例子中person.friends也会被修改。


#### 寄生式继承

寄生式（parasitic）继承是与原型式继承紧密相关的一种思路，并且同样也是由克罗克福德推而广之的。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。
```
function createAnother(original){
	var clone = object(original);	//通过调用函数创建一个新对象
	clone.sayHi = function(){		//以某种方式来增强这个对象
	alert("hi");
	};
	return clone;					//返回这个对象
} 
```
`createAnother()`函数接收了一个参数，也就是将要作为新对象基础的对象。然后，把这个对象`original`传递给`object()`函数，将返回的结果赋值给`clone`。再为`clone`对象添加一个新方法`sayHi()`，最后返回`clone `对象。可以像下面这样来使用`createAnother()`函数：
```
var person = {
	name: "Nicholas",
	friends: ["Shelby", "Court", "Van"]
};
var anotherPerson = createAnother(person);
anotherPerson.sayHi(); //"hi"
```
这个例子中的代码基于`person`返回了一个新对象——`anotherPerson`。新对象不仅具有 `person`的所有属性和方法，而且还有自己的`sayHi()`方法。

在主要考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。前面示范继承模式时使用的 `object()`函数不是必需的；任何能够返回新对象的函数都适用于此模式。


#### 寄生组合式继承

组合继承最大的问题就是无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。子类型最终会包含超类型对象的全部实例属性，但我们不得不在调用子类型构造函数时重写这些属性。再来看一看下面组合继承的例子。
```
function SuperType(name){
	this.name = name;
	this.colors = ["red", "blue", "green"];
}

SuperType.prototype.sayName = function(){
	alert(this.name);
};

function SubType(name, age){
	SuperType.call(this, name);			//第二次调用 SuperType()
	this.age = age;
}

SubType.prototype = new SuperType();	//第一次调用 SuperType()
SubType.prototype.constructor = SubType;
SubType.prototype.sayAge = function(){
 alert(this.age);
}; 
```
在第一次调用`SuperType`构造函数时，`SubType.prototype`会得到两个属性：`name`和`colors`；它们都是`SuperType`的实例属性，只不过现在位于`SubType`的原型中。当调用`SubType`构造函数时，又会调用一次`SuperType`构造函数，这一次又在新对象上创建了实例属性`name`和`colors`。于是，这两个属性就屏蔽了原型中的两个同名属性。

所谓**寄生组合式继承**，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。
```
function inheritPrototype(subType, superType){
	var prototype = object(superType.prototype); //创建对象
	prototype.constructor = subType; //增强对象
	subType.prototype = prototype; //指定对象
}
```
`inheritPrototype()`函数实现了寄生组合式继承的最简单形式。这个函数接收两个参数：子类型构造函数和超类型构造函数。在函数内部，第一步是创建超类型原型的一个副本。第二步是为创建的副本添加`constructor`属性，从而弥补因重写原型而失去的默认的`constructor`属性。最后一步，将新创建的对象（即副本）赋值给子类型的原型。

```
function SuperType(name){
	this.name = name;
	this.colors = ["red", "blue", "green"];
}

SuperType.prototype.sayName = function(){
	alert(this.name);
};

function SubType(name, age){
	SuperType.call(this, name);
	this.age = age;
}

inheritPrototype(SubType, SuperType);	//核心
SubType.prototype.sayAge = function(){
	alert(this.age);
};
```
寄生组合式继承是引用类型最理想的继承范式。


#### 关于`Object.create()`

ES5已经规范化`Object.create()`方法，上述各种基于prototype模拟类继承方法中的`object()`可以直接用`Object.create()`代替。在ES5之前的环境中（比如旧IE）如果要支持这个功能的话就需要使用一段简单的polyfill代码，它部分实现了`Object.create(..)`的功能：
```
if (!Object.create) {
	Object.create = function(o) {
		function F(){}
		F.prototype = o;
		return new F();
	};
}
```